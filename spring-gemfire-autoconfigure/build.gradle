plugins {
    id 'java-library'
    id "io.freefair.lombok" version "8.0.1"
    id 'dependency-constraints'
    id 'gemfire-repo-artifact-publishing'
    id 'com.netflix.nebula.optional-base' version '9.0.0' // if you want optional-base
}

description = "Spring Boot Auto-Configuration for VMware GemFire"

project.ext.set("pomProjectLongName","Spring Boot Auto-Configure for VMware GemFire")
project.ext.set("pomProjectArtifactName","spring-boot-3.0-gemfire-autoconfigure-${gemfireBaseVersion}")
project.ext.set("pomProjectDescription",description)

dependencies {
    api project(":spring-gemfire")
    compileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"
    implementation "jakarta.annotation:jakarta.annotation-api"

    implementation project(':spring-gemfire-extensions'), optional

    implementation "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion", optional
    implementation "org.springframework.boot:spring-boot-autoconfigure-processor:$springBootVersion", optional
    implementation "com.vmware.gemfire:spring-session-3.0-gemfire-${gemfireBaseVersion}:$springSessionDataGemFireVersion", optional

    testImplementation "jakarta.servlet:jakarta.servlet-api"
    testImplementation "org.apache.httpcomponents.client5:httpclient5"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    testCompileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"

    testRuntimeOnly project(':spring-gemfire-jetty11')

    testRuntimeOnly "javax.cache:cache-api"
    testRuntimeOnly "com.vmware.gemfire:geode-web:$gemfireVersion"
    testRuntimeOnly "org.springframework.boot:spring-boot-starter-jetty"
    testRuntimeOnly "org.springframework.boot:spring-boot-starter-json"
    testRuntimeOnly "org.springframework.shell:spring-shell:$springShellVersion"
    testImplementation 'com.vmware.gemfire:spring-test-gemfire-9.15-3.0'
}

repositories {
    def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
    if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
        additionalMavenRepoURLs.split(",").each {
            project.getRepositories()
                    .maven(mavenRepository -> {
                        mavenRepository.setUrl(uri(it.toString()));
                    });
        }
    }
}

