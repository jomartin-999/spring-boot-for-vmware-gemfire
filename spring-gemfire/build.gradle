plugins {
  id 'java-library'
  id "io.freefair.lombok" version "8.0.1"
  id 'dependency-constraints'
  id 'gemfire-repo-artifact-publishing'
  id 'com.netflix.nebula.optional-base' version '9.0.0' // if you want optional-base
}

description = "Spring GemFire base build for VMware GemFire"

project.ext.set("pomProjectLongName", description)
project.ext.set("pomProjectArtifactName", "spring-boot-3.0-gemfire-core-${gemfireBaseVersion}")
project.ext.set("pomProjectDescription", description)


dependencies {
  api project(':spring-gemfire-extensions')

  api "org.springframework:spring-context-support"
  api "org.springframework:spring-jcl"
  api "org.springframework.boot:spring-boot-starter"
  api "com.vmware.gemfire:spring-data-3.0-gemfire-${gemfireBaseVersion}:${springDataTanzuGemFireVersion}"

  compileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"

  implementation "org.springframework:spring-test", optional

  runtimeOnly "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

  // See additional testImplementation dependencies declared in the testDependencies project extension
  // defined in the DependencySetPlugin.
  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude group: "org.skyscreamer", module: "jsonassert"
  }

  testImplementation "jakarta.persistence:jakarta.persistence-api"
  testImplementation "org.springframework.boot:spring-boot-starter-data-jpa"
  testImplementation "org.springframework.boot:spring-boot-starter-data-cassandra"
  testImplementation "com.vmware.gemfire:spring-test-gemfire-${gemfireBaseVersion}-3.0"
  testImplementation "org.testcontainers:testcontainers"
  testImplementation "org.testcontainers:cassandra"

  testRuntimeOnly "org.hsqldb:hsqldb"
}

repositories {
  def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
  if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
    additionalMavenRepoURLs.split(",").each {
      project.getRepositories()
              .maven(mavenRepository -> {
                mavenRepository.setUrl(uri(it.toString()));
              });
    }
  }
}
