plugins {
  id 'java-library'
  id "io.freefair.lombok" version "6.5.1"
  id 'dependency-constraints'
  id 'gemfire-repo-artifact-publishing'
  id 'spring-java-jar'
  id 'com.netflix.nebula.optional-base' version '8.0.0' // if you want optional-base
//    id 'com.netflix.nebula.provided-base' version '8.0.0' // if you want provided-base
}

description = "Spring Boot Auto-Configuration for VMware GemFire"

project.ext.set("pomProjectLongName", "Spring Boot Auto-Configure for VMware GemFire")
project.ext.set("pomProjectArtifactName", "spring-boot-2.6-gemfire-autoconfigure-${gemfireBaseVersion}")
project.ext.set("pomProjectDescription", description)

dependencies {
  api project(":spring-gemfire")

  compileOnly "com.google.code.findbugs:jsr305"

  implementation project(':spring-gemfire-extensions'), optional

  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
  annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor:$springBootVersion"

  implementation "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion", optional
  implementation "org.springframework.boot:spring-boot-autoconfigure-processor:$springBootVersion", optional
  implementation "com.vmware.gemfire:spring-session-2.6-gemfire-${gemfireBaseVersion}:$springSessionDataGemFireVersion", optional

  implementation "org.aspectj:aspectjweaver:1.9.7"

  compileOnly "com.vmware.gemfire:geode-server-all:$gemfireVersion"

  testImplementation ("com.vmware.gemfire:geode-server-all:$gemfireVersion"){
    exclude group: 'com.vmware.gemfire', module: 'geode-log4j'
  }

  testImplementation "jakarta.servlet:jakarta.servlet-api"
  testImplementation "junit:junit"
  testImplementation "org.assertj:assertj-core"
  testImplementation "org.mockito:mockito-core"
  testImplementation "org.projectlombok:lombok"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "org.springframework.boot:spring-boot-starter-web"
  testImplementation "com.vmware.gemfire:spring-test-gemfire-9.15-2.6:$springTestGemFireVersion"
  testImplementation "edu.umd.cs.mtc:multithreadedtc"
  testImplementation "com.vmware.gemfire:geode-http-service:${gemfireVersion}"
  testImplementation "com.vmware.gemfire:geode-web:${gemfireVersion}"
  testImplementation "org.apache.httpcomponents:httpclient"

  testCompileOnly "com.google.code.findbugs:jsr305"

  testRuntimeOnly "javax.cache:cache-api"
  testRuntimeOnly "org.springframework.boot:spring-boot-starter-jetty"
  testRuntimeOnly "org.springframework.boot:spring-boot-starter-json"
  testRuntimeOnly "org.springframework.shell:spring-shell"

  // Runtime Test dependency on Spring Cloud Services (SCS) to verify workaround to SCS problem!
  //testRuntime("io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry:2.0.3.RELEASE") {
  //	exclude group: "org.apache.logging.log4j", module: "log4j-core"
  //}

}

tasks.named('compileJava') {
  inputs.files(tasks.named('processResources'))
}

repositories {
  def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
  if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
    additionalMavenRepoURLs.split(",").each {
      project.getRepositories()
              .maven(mavenRepository -> {
                mavenRepository.setUrl(uri(it.toString()));
              });
    }
  }
}

